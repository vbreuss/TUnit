"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[1114],{89:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>l});var n=s(4848),i=s(8453);const r={sidebar_position:1},a="Test Set Ups",o={id:"tutorial-extras/setup",title:"Test Set Ups",description:"Most setup for a test can be performed in the constructor (think setting up mocks, assigning fields.)",source:"@site/docs/tutorial-extras/setup.md",sourceDirName:"tutorial-extras",slug:"/tutorial-extras/setup",permalink:"/TUnit/docs/tutorial-extras/setup",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Tutorial - Extras",permalink:"/TUnit/docs/category/tutorial---extras"},next:{title:"Test Clean Ups",permalink:"/TUnit/docs/tutorial-extras/cleanup"}},c={},l=[];function d(e){const t={code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"test-set-ups",children:"Test Set Ups"})}),"\n",(0,n.jsx)(t.p,{children:"Most setup for a test can be performed in the constructor (think setting up mocks, assigning fields.)"}),"\n",(0,n.jsx)(t.p,{children:"However some scenarios require further setup that could be an asynchronous operation.\nE.g. pinging a service to wake it up in preparation for the tests."}),"\n",(0,n.jsxs)(t.p,{children:["For this, we can declare a method with a ",(0,n.jsx)(t.code,{children:"[Before(...)]"})," or a ",(0,n.jsx)(t.code,{children:"[GlobalBefore(...)]"})," attribute."]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"[Before(EachTest)]"})," methods should NOT be static, and they will be executed repeatedly before each test in their class starts."]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"[Before(Class)]"})," methods SHOULD be static, and they will be executed only once, before any test in their class starts."]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"[Before(Assembly)]"})," methods SHOULD be static, and they will be executed only once, before any test in their assembly starts."]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:["All ",(0,n.jsx)(t.code,{children:"[GlobalBefore(...)]"})," methods SHOULD be static, and they will follow the same behaviour as above, but fire for every test/class/assembly that is being run in the test session."]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Methods will be executed bottom-up, so the base class set ups will execute first and then the inheriting classes."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-csharp",children:'using TUnit.Core;\n\nnamespace MyTestProject;\n\npublic class MyTestClass\n{\n    private int _value;\n    private static HttpResponseMessage? _pingResponse;\n\n    [Before(Class)]\n    public static async Task Ping()\n    {\n        _pingResponse = await new HttpClient().GetAsync("https://localhost/ping");\n    }\n    \n    [Before(EachTest)]\n    public async Task Setup()\n    {\n        await Task.CompletedTask;\n        \n        _value = 99;\n    }\n\n    [Test]\n    public async Task Test()\n    {\n        await Assert.That(_value).IsEqualTo(99);\n        await Assert.That(_pingResponse?.StatusCode)\n            .IsNotNull()\n            .And.IsEqualTo(HttpStatusCode.OK);\n    }\n}\n'})})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>a,x:()=>o});var n=s(6540);const i={},r=n.createContext(i);function a(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);