"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[5385],{9059:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var n=r(4848),i=r(8453);const o={sidebar_position:13},s="Property Injection",a={id:"tutorial-extras/property-injection",title:"Property Injection",description:"TUnit makes it easy to initialise some properties on your test class instead of passing them into the constructor.",source:"@site/docs/tutorial-extras/property-injection.md",sourceDirName:"tutorial-extras",slug:"/tutorial-extras/property-injection",permalink:"/TUnit/docs/tutorial-extras/property-injection",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:13,frontMatter:{sidebar_position:13},sidebar:"tutorialSidebar",previous:{title:"Data Source Generators",permalink:"/TUnit/docs/tutorial-extras/data-source-generators"},next:{title:"Tutorial - Assertions",permalink:"/TUnit/docs/category/tutorial---assertions"}},c={},l=[];function u(e){const t={code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"property-injection",children:"Property Injection"})}),"\n",(0,n.jsx)(t.p,{children:"TUnit makes it easy to initialise some properties on your test class instead of passing them into the constructor."}),"\n",(0,n.jsxs)(t.p,{children:["Your properties must be marked with the ",(0,n.jsx)(t.code,{children:"required"})," keyword and then simply place a data attribute on it.\nThe required keyword keeps your code clean and correct. If a property isn't passed in, you'll get a compiler warning, so you know something has gone wrong. It also gets rid of any pesky nullability warnings."]}),"\n",(0,n.jsx)(t.p,{children:"Supported attributes for properties are:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Argument"}),"\n",(0,n.jsx)(t.li,{children:"MethodDataSource"}),"\n",(0,n.jsx)(t.li,{children:"ClassDataSource"}),"\n",(0,n.jsx)(t.li,{children:"DataSourceGeneratorAttribute (though limited to the first item returned)"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"This can help simplify base classes with common behaviour and avoid having to write boilerplate constructors everywhere."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-csharp",children:'using TUnit.Core;\n\nnamespace MyTestProject;\n\npublic class PropertySetterTests\n{\n    [Arguments("1")]\n    public required string Property1 { get; init; }\n        \n    [MethodDataSource(nameof(MethodData))]\n    public required string Property2 { get; init; }\n        \n    [ClassDataSource<InnerModel>]\n    public required InnerModel Property3 { get; init; }\n    \n    [ClassDataSource<InnerModel>(Shared = SharedType.Globally)]\n    public required InnerModel Property4 { get; init; }\n    \n    [ClassDataSource<InnerModel>(Shared = SharedType.ForClass)]\n    public required InnerModel Property5 { get; init; }\n    \n    [ClassDataSource<InnerModel>(Shared = SharedType.Keyed, Key = "Key")]\n    public required InnerModel Property6 { get; init; }\n        \n    [DataSourceGeneratorTests.AutoFixtureGenerator<string>]\n    public required string Property7 { get; init; }\n    \n    [Test]\n    public void Test()\n    {\n        Console.WriteLine(Property7);\n    }\n}\n'})})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>s,x:()=>a});var n=r(6540);const i={},o=n.createContext(i);function s(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);