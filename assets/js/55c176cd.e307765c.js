"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[7543],{680:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var s=n(4848),o=n(8453);const r={sidebar_position:7},i="Test Context",a={id:"tutorial-extras/test-context",title:"Test Context",description:"All tests have a TestContext object available to them.",source:"@site/docs/tutorial-extras/test-context.md",sourceDirName:"tutorial-extras",slug:"/tutorial-extras/test-context",permalink:"/TUnit/docs/tutorial-extras/test-context",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Properties",permalink:"/TUnit/docs/tutorial-extras/properties"},next:{title:"Test Filters",permalink:"/TUnit/docs/tutorial-extras/test-filters"}},c={},l=[];function d(e){const t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"test-context",children:"Test Context"})}),"\n",(0,s.jsxs)(t.p,{children:["All tests have a ",(0,s.jsx)(t.code,{children:"TestContext"})," object available to them."]}),"\n",(0,s.jsxs)(t.p,{children:["This can be accessed statically via ",(0,s.jsx)(t.code,{children:"TestContext.Current"}),"."]}),"\n",(0,s.jsx)(t.p,{children:"Here you can see information about the test, including things like the test name, containing class, custom properties, categories, etc."}),"\n",(0,s.jsxs)(t.p,{children:["This can be useful if you want something like a generic ",(0,s.jsx)(t.code,{children:"AfterEachTest"})," for all tests, but with logic to execute for only certain tests."]}),"\n",(0,s.jsx)(t.p,{children:"e.g."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:'if (TestContext.Current.TestInformation.CustomProperties.ContainsKey("SomeProperty"))\n{\n    // Do something\n}\n'})}),"\n",(0,s.jsxs)(t.p,{children:["The context also has a ",(0,s.jsx)(t.code,{children:"Results"})," object. You'll notice this is nullable. This will be null until you're in the context of a ",(0,s.jsx)(t.code,{children:"AfterEachTest"})," method. That's because the ",(0,s.jsx)(t.code,{children:"Results"})," can only be set after a test has finished."]}),"\n",(0,s.jsx)(t.p,{children:"These results can be handy when you're cleaning up, but maybe only want to do something if a test failed."}),"\n",(0,s.jsx)(t.p,{children:"e.g."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:"if (TestContext.Current?.Result?.Status == Status.Failed)\n{\n    // Take a screenshot?\n}\n"})})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var s=n(6540);const o={},r=s.createContext(o);function i(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);